# Default values for hiro-monitoring.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

# Custom prometheus values
prometheus:
  enabled: true
  # Accessed by InfluxDB.

  server:
    remoteWrite:
      - url: "http://{{ tpl .Release.Name . }}-telegraf:1234/receive"

    resources:
      limits:
        cpu: 1
        memory: 2Gi
      requests:
        cpu: 1
        memory: 1Gi
    service:
      retention: "15d"
      ## Prometheus' data retention size. Supported units: B, KB, MB, GB, TB, PB, EB.
      ##
      retentionSize: "30Gb"

    persistentVolume:
      size: 32Gi

    global:
      ## How frequently to scrape targets by default
      ##
      scrape_interval: 1m
      ## How long until a scrape request times out
      ##
      scrape_timeout: 11s
      ## How frequently to evaluate rules
      ##
      evaluation_interval: 1m
  kube-state-metrics:
    ## If false, kube-state-metrics sub-chart will not be installed
    ##
    enabled: true

  alertmanager:
    ## If false, alertmanager will not be installed
    enabled: true
    persistence:
      size: 1Gi
    resources:
      limits:
        cpu: 300m
        memory: 128Mi
      requests:
        cpu: 300m
        memory: 128Mi


  prometheus-node-exporter:
    enabled: true

  extraScrapeConfigs: |
    - job_name: 'prometheus-node-exporter'
      kubernetes_sd_configs:
        - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_endpoints_name]
        regex: '.*prometheus-node-exporter'
        action: keep
    - job_name: 'idrac-exporter'
      params:
        "target": ["10.14.2.7"]
      kubernetes_sd_configs:
        - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_endpoints_name]
        regex: '.*idrac-exporter'
        action: keep
    - job_name: 'prometheus-snmp-exporter'
      kubernetes_sd_configs:
        - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_endpoints_name]
        regex: '.*prometheus-snmp-exporter'
        action: keep
    - job_name: 'dcgm-exporter'
      kubernetes_sd_configs:
        - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_endpoints_name]
        regex: '.*dcgm-exporter'
        action: keep
    - job_name: 'kepler'
      kubernetes_sd_configs:
        - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_endpoints_name]
        regex: 'kepler'
        action: keep
    - job_name: 'k8s-ephemeral-storage-metrics'
      kubernetes_sd_configs:
        - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
        action: keep
        regex: 'k8s-ephemeral-storage-metrics'
      - source_labels: [__meta_kubernetes_pod_ip]
        target_label: __address__
        replacement: $1:9100

grafana:
  enabled: true
  sidecar:
    dashboards:
      enabled: true
      SCProvider: false
  adminPassword: admin
  resources:
   limits:
     cpu: 1
     memory: 512Mi
   requests:
     cpu: 1
     memory: 256Mi
  livenessProbe:
    initialDelaySeconds: 120
    timeoutSeconds: 60
    failureThreshold: 10
  persistence:
    enabled: true
    # storageClassName: default
    size: 10Gi

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          # this is clusterIP address of monitoring-stack-prometheus-server
          url: http://{{ tpl .Release.Name . }}-prometheus-server:80
          access: proxy
          isDefault: true
        - name: Loki
          type: loki
          # this is clusterIP address of monitoring-stack-prometheus-server
          url: http://{{ tpl .Release.Name . }}-loki:3100
          access: proxy
        - name: InfluxDB
          type: influxdb
          url: http://{{ tpl .Release.Name . }}-influxdb2
          access: proxy
          secureJsonData:
            token: "encrypted"
          jsonData:
            defaultBucket: "prometheus"
            organization: "influxdata"
            timeout: 10
            version: "Flux"
        - name: Alertmanager
          type: alertmanager
          access: proxy
          url: http://{{ tpl .Release.Name . }}-alertmanager:9093
          jsonData:
            implementation: prometheus
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'grafana-dashboards-kubernetes'
        orgId: 1
        folder: 'Kubernetes'
        type: file
        disableDeletion: true
        editable: true
        options:
          path: /var/lib/grafana/dashboards/grafana-dashboards-kubernetes
      - name: 'default'
        orgId: 1
        folder: 'default'
        type: file
        disableDeletion: true
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
  dashboardsConfigMaps:
    default: "grafana-dashboards"
  dashboards:
    grafana-dashboards-kubernetes:
      k8s-system-api-server:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-api-server.json
        token: ''
      k8s-system-coredns:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-coredns.json
        token: ''
      k8s-views-global:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-global.json
        token: ''
      k8s-views-namespaces:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-namespaces.json
        token: ''
      k8s-views-nodes:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-nodes.json
        token: ''
      k8s-views-pods:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-pods.json
        token: ''            

telegraf:
  enabled: true
  resources:
    requests:
      memory: 1Gi
      cpu: 1
    limits:
      memory: 1Gi
      cpu: 1
  config:
    agent:
      metric_batch_size: 50000
      metric_buffer_limit: 200000
      interval: "5s"
      flush_interval: "5s"
      debug: true
    inputs:
      - http_listener_v2:
          service_address: ":1234"
          paths: ["/receive"]
          data_format: prometheusremotewrite
    outputs:      
      - influxdb_v2:
          urls:
            - "http://ms1-influxdb2"
          token: encrypted
          organization: "influxdata"
          bucket: "prometheus"            
          timeout: "30s"
          metric_batch_size: 50000  
          metric_buffer_limit: 200000

influxdb2:
  enabled: true  
  persistence:
    size: 32Gi
  resources:
    requests:
      memory: 6Gi
      cpu: 4
    limits:
      memory: 6Gi
      cpu: 4
  adminUser:
    organization: "influxdata"
    bucket: "prometheus"
    user: "admin"
    password: "encrypted"
    token: "encrypted"
  env:
    - name: INFLUXDB_HTTP_AUTH_ENABLED
      value: "true"

fluentd-sidecar-injector:
  enabled: true
  useCertManager: false
  sidecarInjector:
    fluentbit:
      aggregatorHost:	"{{ tpl .Release.Name . }}-loki"
      aggregatorPort:	3100
      applicationLogDir:	/var/opt/app/logs
      dockerImage:	ghcr.io/h3poteto/fluentd-sidecar-injector:latest
      tagPrefix:	sidecar-log

loki-stack:
  enabled: true
  table_manager:
    retention_deletes_enabled: true
    retention_period: 336h
  loki:
    resources:
      limits:
        cpu: 1
        memory: 2Gi
      requests:
        cpu: 1
        memory: 1Gi
    persistence:
      enabled: true
      size: 32Gi

  fluent-bit:
    enabled: true
  promtail:
    enabled: false

prometheus-snmp-exporter:
  enabled: true

kubernetes-event-exporter:
  enabled: true
  config:
    route:
      # Main route
      routes:
        # This route allows dumping all events because it has no fields to match and no drop rules.
        - match:
            - receiver: dump
        - match:
            - kind: "Pod|Deployment|ReplicaSet|StatefullSet|PVC|Node"
              receiver: "loki"  
    receivers:
    - name: "dump"
      stdout:
        deDot: true
    - name: "loki"
      loki:
        streamLabels:
          stream: kube-events
        url: http://{{ tpl .Release.Name . }}-loki:3100/loki/api/v1/push

kepler:
  enabled: false
  image:
    tag: latest

dcgm-exporter:
  # requires NVIDIA DCGM interface, will fail if not available
  enabled: false

idrac-exporter:
  enabled: false

k8s-ephemeral-storage-metrics:
  enabled: true
  prometheus:
    enable: false